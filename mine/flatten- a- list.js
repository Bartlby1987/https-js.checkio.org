// Никола любит классифицировать все вещи. Он классифицировал ряд чисел и в результате его усилий, простая последовательность чисел стала глубоко вложенным списком. София и Стефан не понимают как он организовал числа и нужно выяснить, что все это значит. Им нужна ваша помощь, чтобы понять сумасшедший список Николы.
//
//     Существует список, который содержит целые числа или другие вложенные списки, которые могут содержать еще несколько списков и целых чисел, которые затем... вы получаете идею. Вы должны положить все целые значения, в один плоский список. Порядок должен быть такой же как и в первоначальном списке с представлением строки слева направо.
//
//     Мы должны скрыть эту программу от Николы, сохранив её маленькой и легкой. Из-за этого, Ваш код должен быть короче, чем 140 символов (с пробелами) .
//
// Входные данные: Вложенный список с целыми числами.
//
//     Выходные данные: Одномерный список с целыми числами.
//
//     Пример:
//
// flatList([1, 2, 3]) == [1, 2, 3]
// flatList([1, [2, 2, 2], 4]) == [1, 2, 2, 2, 4]
// flatList([[[2]], [4, [5, 6, [6], 6, 6, 6], 7]]) == [2, 4, 5, 6, 6, 6, 6, 6, 7]
// flatList([-1, [1, [-2], 1], -1]) == [-1, 1, -2, 1, -1]
// Предусловия: 0 ≤ |array| ≤ 100
// ∀ x ∈ array : -232 < x < 232 or x is a list
// depth < 10
"use strict";

function flatList(a,r){
    if(!r){ r = []}
    for(let i=0; i<a.length; i++){
        if(a[i].constructor === Array){
            r.concat(flatList(a[i], r));
        }else{
            r.push(a[i]);
        }
    }
    return r;
}

var assert = require('assert');

if (!global.is_checking) {
    assert.equal(flatList([1, 2, 3]), [1, 2, 3], "First");
    assert.equal(flatList([1, [2, 2, 2], 4]), [1, 2, 2, 2, 4], "Second");
    assert.equal(flatList([[[2]], [4, [5, 6, [6], 6, 6, 6], 7]]), [2, 4, 5, 6, 6, 6, 6, 6, 7], "Third");
    assert.equal(flatList([-1, [1, [-2], 1], -1]), [-1, 1, -2, 1, -1], "Four");
    console.log("Coding complete? Click 'Check' to review your tests and earn cool rewards!");
}
