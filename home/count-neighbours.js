// В конечных автоматах, Окрестность Мура содержит восемь клеток, окружающие центральную ячейку двумерной квадратной решетки. Эта область названа в честь Эдварда Ф. Мура, пионера теории конечных автоматов. Существует множество настольных игр с прямоугольной сеткой квадратных ячеек. Для некоторых игр важно знать обстановку в соседних клетках для схемы размещения фишек и стратегии.
//
//     У вас имеется позиция для прямоугольного игрового поля, где 1 клетка с фишкой, а 0 пустая. Также есть координатная сетка, в форме строк и столбцов (нумерация с 0). Вы должны определить сколько фишек близко к этой ячейке. Каждая клетка взаимодействует с восьмью соседними (Горизонтально, вертикально, по диагонали);
//
// example
//
// Для примера возьмем (см. рисунок) такую схему:
//
//     [[1, 0, 0, 1, 0],
//         [0, 1, 0, 0, 0],
//         [0, 0, 1, 0, 1],
//         [1, 0, 0, 0, 0],
//         [0, 0, 1, 0, 0]]
//
// Для первого примера координаты ячейки (1, 2) и мы можем видеть на схеме, что у фишки есть 3 соседа. Для второго примера координаты ячейки (0, 0) и эта ячейка содержит фишку, но мы считаем только соседей поэтому ответ 1.
//
// Входные данные: Три аргумента. Кортеж кортежей с числами (1/0), номер строки и колонки в виде целых чисел.
//
//     Выходные данные: Сколько соседей имеет клетка в виде целого числа.
//
//
//     Предусловия:
// 3 ≤ len(grid) ≤ 10
// all(len(grid[0]) == len(row) for row in grid)

function countNeighbours(data, row, col) {
    if (row > data.length - 1 || col > data.length - 1) {
        return 0;
    }
    let coordinates = [[row - 1, col - 1], [row + 1, col + 1], [row + 1, col - 1], [row - 1, col + 1],
        [row - 1, col], [row + 1, col], [row, col - 1], [row, col + 1]];
    let newCoordinates = [];

    for (let i = 0; i < coordinates.length; i++) {
        if (coordinates[i][0] >= 0 && coordinates[i][0] < data.length && coordinates[i][1] >= 0
            && coordinates[i][1] < data[0].length) {
            newCoordinates.push(coordinates[i])
        }
    }
    let counter = 0;
    for (let coordinate of newCoordinates) {
        if (data[coordinate[0]][coordinate[1]] === 1) {
            counter++;
        }
    }


    return counter;
}

var assert = require('assert');

if (!global.is_checking) {
    assert.equal(countNeighbours([[1, 0, 0, 1, 0],
        [0, 1, 0, 0, 0],
        [0, 0, 1, 0, 1],
        [1, 0, 0, 0, 0],
        [0, 0, 1, 0, 0]], 1, 2), 3, "1st example");

    assert.equal(countNeighbours([[1, 0, 0, 1, 0],
        [0, 1, 0, 0, 0],
        [0, 0, 1, 0, 1],
        [1, 0, 0, 0, 0],
        [0, 0, 1, 0, 0]], 0, 0), 1, "2nd example");

    assert.equal(countNeighbours([[1, 1, 1],
        [1, 1, 1],
        [1, 1, 1]], 0, 2), 3, "Dense corner");

    assert.equal(countNeighbours([[0, 0, 0],
        [0, 1, 0],
        [0, 0, 0]], 1, 1), 0, "Single");

    console.log("Coding complete? Click 'Check' to review your tests and earn cool rewards!");
}